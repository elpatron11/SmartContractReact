{"ast":null,"code":"require('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0xc508a5a15cc5691DDE542bC467D12C69027a10ef\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \" \" + \"🦊\" + \" \" + \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \" \" + \"🦊\" + \" \" + \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"✅\" + \" \" + \"  View the status of your transaction on Etherscan\"\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Raul/web2andweb3/starter-files/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error"],"mappings":"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","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xc508a5a15cc5691DDE542bC467D12C69027a10ef\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n  contractABI,\r\n  contractAddress\r\n);\r\n\r\nexport const loadCurrentMessage = async () => { \r\n  const message = await helloWorldContract.methods.message().call();\r\n  return message;\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\" \"+ \"🦊\"+\" \"+ \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\r\n\r\n), }; } };\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n\r\n\" \" +\"🦊\"+\" \" +\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\r\n\r\n), }; } };\r\n\r\nexport const updateMessage = async (address, message) => {\r\n\r\n  //input error handling\r\n  if (!window.ethereum || address === null) {\r\n    return {\r\n      status:\r\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\r\n    };\r\n  }\r\n\r\n  if (message.trim() === \"\") {\r\n    return {\r\n      status: \"❌ Your message cannot be an empty string.\",\r\n    };\r\n  }\r\n\r\n  //set up transaction parameters\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: address, // must match user's active address.\r\n    data: helloWorldContract.methods.update(message).encodeABI(),\r\n  };\r\n\r\n  //sign the transaction\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      status: (\r\n\r\n          \"✅\"+\" \"+\r\n\r\n          \"  View the status of your transaction on Etherscan\"\r\n      ),\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: \"😥 \" + error.message,\r\n    };\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}